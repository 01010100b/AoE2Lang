Available constants:

STACK_POINTER_BASE_ADDR

Available goals:

reg_1, reg_2, ... (as many as needed)
reg_current_stack_frame

intrinsics:

memcpy(int addr1, int addr2, int length):

(defrule
	(true)
=>
	(up-modify-goal reg_1 c:= 0)
)

(defrule
	(true)
=>
	(up-modify-goal reg_3 g:= addr1)
	(up-modify-goal reg_3 g:+ reg_1)
	(up-get-indirect-goal g: reg_3 reg_2)
	(up-modify-goal reg_3 g:= addr2)
	(up-modify-goal reg_3 g:+ reg_1)
	(up-set-indirect-goal g: reg_3 reg_2)
	(up-modify-goal reg_1 c:+ 1)
)

(defrule
	(up-compare-goal reg_1 g:< length)
=>
	(up-jump-dynamic c:- 2)
)

sort(int addr, int length, func S):

(defrule
	(true)
=>
	(up-modify-goal is_sorted c:= TRUE)
	(up-modify-goal index c:= 0)
)

(defrule
	(true)
=>
	(up-modify-goal current g:= addr)
	(up-modify-goal current g:+ index)
	(up-get-indirect-goal g: current item_a)
	(up-modify-goal current c:+ 1)
	(up-get-indirect-goal g: current item_b)
)

<S> ; a bunch of rules which set the goal cmpr to -1 if item_a < item_b, to 0 if item_a = item_b, or to 1 if item_a > item_b

(defrule
	(up-compare-goal cmpr c:== 1)
=>
	(up-modify-goal current g:= addr)
	(up-modify-goal current g:+ index)
	(up-set-indirect-goal g: current g: item_b)
	(up-modify-goal current c:+ 1)
	(up-set-indirect-goal g: current g: item_a)
	(up-modify-goal is_sorted c:= FALSE)
)

(defrule
	(true)
=>
	(up-modify-goal index c:+ 2)
)

(defrule
	(up-compare-goal index g:< length)
=>
	(up-modify-goal index c:- 1)
	(up-jump-dynamic c: -(rules_in_S + 4))
)

(defrule
	(up-compare-goal is_sorted c:== FALSE)
=>
	(up-jump-dynamic c: -(rules_in_S + 6))
)

Functions:

; F<int, int, int>
(defrule
	(true)
=> 
	(up-get-rule-id func-addr-F)
	(up-modify-goal func-addr-F c:+ 1)
	(up-jump-dynamic c: rules_in_F)
)

<F> ; the actual function

(defrule
	(true)
=>
	(up-jump-direct g: return-addr)
)

Calling it:

(defrule
	(true)
=>
	(up-get-rule-id return-addr)
	(up-modify-goal return-addr c:+ 1)
	(up-modify-goal par_1 some-parameter)
	(up-modify-goal par_2 some-parameter)
	...
	(up-jump-direct func-addr-F)
)